{"remainingRequest":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js!/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/src/auth.js","dependencies":[{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/src/auth.js","mtime":1586574038006},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nexport default {\n  /**\n   * Returns the authentication token from local storage.\n   */\n  getToken: function getToken() {\n    try {\n      return localStorage.getItem('Authorization');\n    } catch (_unused) {\n      return null;\n    }\n  },\n\n  /**\n   * Parses and saves the authentication token.\n   * @param {String} token A JWT encoded token.\n   */\n  saveToken: function saveToken(token) {\n    localStorage.setItem('Authorization', token);\n  },\n\n  /**\n   * Invalidates the local authentication token.\n   */\n  destroyToken: function destroyToken() {\n    localStorage.removeItem('Authorization');\n  },\n\n  /**\n   * Returns the user represented by the authentication token (null if user is not authenticated).\n   * @function\n   */\n  getUser: function getUser() {\n    var token = localStorage.getItem('Authorization');\n    var user = null; // If a token exists then decode it\n\n    if (token) {\n      var base64Url = token.split('.')[1];\n      var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      var secondsSinceEpoch = new Date() / 1000;\n      var parsedToken = JSON.parse(window.atob(base64)); // If current date is after expiration date then destroy it\n\n      if (secondsSinceEpoch > parsedToken.exp) {\n        this.destroyToken();\n      } else {\n        user = parsedToken;\n      }\n    }\n\n    return user;\n  },\n  logout: function logout() {\n    localStorage.removeItem('Authorization');\n  }\n};",{"version":3,"sources":["/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/src/auth.js"],"names":["getToken","localStorage","getItem","saveToken","token","setItem","destroyToken","removeItem","getUser","user","base64Url","split","base64","replace","secondsSinceEpoch","Date","parsedToken","JSON","parse","window","atob","exp","logout"],"mappings":";;AAAA,eAAe;AACb;;;AAGAA,EAAAA,QAAQ,EAAE,oBAAW;AACnB,QAAI;AACF,aAAOC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAP;AACD,KAFD,CAEE,gBAAM;AACN,aAAO,IAAP;AACD;AACF,GAVY;;AAWb;;;;AAIAC,EAAAA,SAfa,qBAeHC,KAfG,EAeI;AACfH,IAAAA,YAAY,CAACI,OAAb,CAAqB,eAArB,EAAsCD,KAAtC;AACD,GAjBY;;AAkBb;;;AAGAE,EAAAA,YArBa,0BAqBE;AACbL,IAAAA,YAAY,CAACM,UAAb,CAAwB,eAAxB;AACD,GAvBY;;AAwBb;;;;AAIAC,EAAAA,OA5Ba,qBA4BH;AACR,QAAMJ,KAAK,GAAGH,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAd;AACA,QAAIO,IAAI,GAAG,IAAX,CAFQ,CAIR;;AACA,QAAIL,KAAJ,EAAW;AACT,UAAMM,SAAS,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAlB;AACA,UAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAf;AACA,UAAMC,iBAAiB,GAAG,IAAIC,IAAJ,KAAa,IAAvC;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYR,MAAZ,CAAX,CAApB,CAJS,CAMT;;AACA,UAAIE,iBAAiB,GAAGE,WAAW,CAACK,GAApC,EAAyC;AACvC,aAAKf,YAAL;AACD,OAFD,MAEO;AACLG,QAAAA,IAAI,GAAGO,WAAP;AACD;AACF;;AAED,WAAOP,IAAP;AACD,GAhDY;AAkDba,EAAAA,MAlDa,oBAkDJ;AACPrB,IAAAA,YAAY,CAACM,UAAb,CAAwB,eAAxB;AACD;AApDY,CAAf","sourcesContent":["export default {\n  /**\n   * Returns the authentication token from local storage.\n   */\n  getToken: function() {\n    try {\n      return localStorage.getItem('Authorization');\n    } catch {\n      return null;\n    }\n  },\n  /**\n   * Parses and saves the authentication token.\n   * @param {String} token A JWT encoded token.\n   */\n  saveToken(token) {\n    localStorage.setItem('Authorization', token);\n  },\n  /**\n   * Invalidates the local authentication token.\n   */\n  destroyToken() {\n    localStorage.removeItem('Authorization');\n  },\n  /**\n   * Returns the user represented by the authentication token (null if user is not authenticated).\n   * @function\n   */\n  getUser() {\n    const token = localStorage.getItem('Authorization');\n    let user = null;\n\n    // If a token exists then decode it\n    if (token) {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const secondsSinceEpoch = new Date() / 1000;\n      const parsedToken = JSON.parse(window.atob(base64));\n\n      // If current date is after expiration date then destroy it\n      if (secondsSinceEpoch > parsedToken.exp) {\n        this.destroyToken();\n      } else {\n        user = parsedToken;\n      }\n    }\n\n    return user;\n  },\n  \n  logout() {\n    localStorage.removeItem('Authorization');\n  },\n};\n"]}]}