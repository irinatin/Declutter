{"remainingRequest":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/src/components/ReadingEvent.vue?vue&type=template&id=3925cec4&","dependencies":[{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/src/components/ReadingEvent.vue","mtime":1586719967764},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/irinatin/workspace/java-final-capstone-team-3/vue_starter_java/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\n      \"button\",\n      {\n        on: {\n          click: function($event) {\n            _vm.getCurrentUser()\n            _vm.getBooks()\n            _vm.selectUser()\n            _vm.showFormButton()\n            _vm.showFamUsers()\n          }\n        }\n      },\n      [_vm._v(\"Create Reading Event\")]\n    ),\n    _vm.showForm\n      ? _c(\"div\", [\n          _c(\n            \"select\",\n            {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.readingEvent.bookId,\n                  expression: \"readingEvent.bookId\"\n                }\n              ],\n              attrs: { id: \"books\" },\n              on: {\n                click: function($event) {\n                  return _vm.showFamUsersBtn()\n                },\n                change: function($event) {\n                  var $$selectedVal = Array.prototype.filter\n                    .call($event.target.options, function(o) {\n                      return o.selected\n                    })\n                    .map(function(o) {\n                      var val = \"_value\" in o ? o._value : o.value\n                      return val\n                    })\n                  _vm.$set(\n                    _vm.readingEvent,\n                    \"bookId\",\n                    $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                  )\n                }\n              }\n            },\n            _vm._l(_vm.books, function(book) {\n              return _c(\n                \"option\",\n                { key: book.id, domProps: { value: book.id } },\n                [_vm._v(_vm._s(book.title))]\n              )\n            }),\n            0\n          ),\n          _vm.showUsersButton\n            ? _c(\n                \"button\",\n                {\n                  on: {\n                    click: function($event) {\n                      return _vm.showFamUsers()\n                    }\n                  }\n                },\n                [_vm._v(\"Enter Event for Different Family Members\")]\n              )\n            : _vm._e(),\n          _vm.showUsers\n            ? _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.readingEvent.userId,\n                      expression: \"readingEvent.userId\"\n                    }\n                  ],\n                  attrs: { id: \"users\" },\n                  on: {\n                    change: function($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function(o) {\n                          return o.selected\n                        })\n                        .map(function(o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.readingEvent,\n                        \"userId\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    }\n                  }\n                },\n                _vm._l(_vm.users, function(user) {\n                  return _c(\n                    \"option\",\n                    { key: user.id, domProps: { value: user.id } },\n                    [_vm._v(_vm._s(user.username))]\n                  )\n                }),\n                0\n              )\n            : _vm._e(),\n          _c(\"div\", { staticClass: \"form\" }, [\n            _c(\"div\", { staticClass: \"form-input\" }, [\n              _c(\"span\", { staticClass: \"label\" }, [\n                _vm._v(\"Enter Reading Time:\")\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.readingEvent.readingTime,\n                    expression: \"readingEvent.readingTime\"\n                  }\n                ],\n                attrs: { type: \"number\", placeholder: \"In Minutes\" },\n                domProps: { value: _vm.readingEvent.readingTime },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.readingEvent,\n                      \"readingTime\",\n                      $event.target.value\n                    )\n                  }\n                }\n              })\n            ])\n          ]),\n          _c(\"div\", { staticClass: \"form\" }, [\n            _c(\"div\", { staticClass: \"form-input\" }, [\n              _c(\"span\", { staticClass: \"label\" }, [\n                _vm._v(\"Enter Reading Date:\")\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.readingEvent.readingDate,\n                    expression: \"readingEvent.readingDate\"\n                  }\n                ],\n                attrs: { type: \"text\", placeholder: \"YYYY-MM-dd\" },\n                domProps: { value: _vm.readingEvent.readingDate },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.readingEvent,\n                      \"readingDate\",\n                      $event.target.value\n                    )\n                  }\n                }\n              })\n            ])\n          ]),\n          _c(\n            \"select\",\n            {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.readingEvent.format,\n                  expression: \"readingEvent.format\"\n                }\n              ],\n              attrs: { id: \"format\" },\n              on: {\n                change: function($event) {\n                  var $$selectedVal = Array.prototype.filter\n                    .call($event.target.options, function(o) {\n                      return o.selected\n                    })\n                    .map(function(o) {\n                      var val = \"_value\" in o ? o._value : o.value\n                      return val\n                    })\n                  _vm.$set(\n                    _vm.readingEvent,\n                    \"format\",\n                    $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                  )\n                }\n              }\n            },\n            _vm._l(_vm.formats, function(format) {\n              return _c(\"option\", { key: format.id }, [\n                _vm._v(_vm._s(format.format))\n              ])\n            }),\n            0\n          ),\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.readingEvent.completed,\n                expression: \"readingEvent.completed\"\n              }\n            ],\n            attrs: { type: \"checkbox\", id: \"checkbox\" },\n            domProps: {\n              checked: Array.isArray(_vm.readingEvent.completed)\n                ? _vm._i(_vm.readingEvent.completed, null) > -1\n                : _vm.readingEvent.completed\n            },\n            on: {\n              change: function($event) {\n                var $$a = _vm.readingEvent.completed,\n                  $$el = $event.target,\n                  $$c = $$el.checked ? true : false\n                if (Array.isArray($$a)) {\n                  var $$v = null,\n                    $$i = _vm._i($$a, $$v)\n                  if ($$el.checked) {\n                    $$i < 0 &&\n                      _vm.$set(_vm.readingEvent, \"completed\", $$a.concat([$$v]))\n                  } else {\n                    $$i > -1 &&\n                      _vm.$set(\n                        _vm.readingEvent,\n                        \"completed\",\n                        $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                      )\n                  }\n                } else {\n                  _vm.$set(_vm.readingEvent, \"completed\", $$c)\n                }\n              }\n            }\n          }),\n          _c(\"label\", { attrs: { for: \"checkbox\" } }, [_vm._v(\"Completed\")]),\n          _c(\"div\", [\n            _c(\"button\", { on: { click: _vm.addReadingEvent } }, [\n              _vm._v(\"Submit\")\n            ])\n          ])\n        ])\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}